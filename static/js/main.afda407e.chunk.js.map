{"version":3,"sources":["recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","recipe","i","react_default","a","createElement","role","className","title","description","steps","map","step","Fragment","key","instruction","ingredients","ingredient","name","amount","unit","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","recipes","onClick","setState","currRecipe","undefined","aria-label","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAEe,SAASA,EAAOC,GAE3B,IAAIC,EAASD,EAAMC,OACfC,EAAI,EAER,OAAQC,EAAAC,EAAAC,cAAA,QAAMC,KAAK,QAGnBH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,aAAaN,EAAOO,OAClCL,EAAAC,EAAAC,cAAA,SAAIJ,EAAOQ,eAIfN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAEVN,EAAOS,MAAMC,IAAI,SAAAC,GAAI,OAAET,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,CAAgBC,IAAOF,EAAKG,aAChDZ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,YACbJ,EAAAC,EAAAC,cAAA,UAAKH,KACLC,EAAAC,EAAAC,cAAA,SAAIO,EAAKG,cAEbZ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,YACZK,EAAKI,YAAYL,IAAI,SAAAM,GAAU,OAAEd,EAAAC,EAAAC,cAAA,KAAGS,IAAKG,EAAWC,MAChDD,EAAWE,OAAS,IAAMF,EAAWG,KAAO,IAAMH,EAAWC,UAI1Ef,EAAAC,EAAAC,cAAA,iCCOGgB,cA/Bb,SAAAA,EAAYrB,GAAM,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzB,KACD6B,MAAQ,GAFGP,wEAIT,IAAAQ,EAAAL,KACP,OAAQtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMS,SAAP,KACNV,EAAAC,EAAAC,cAAA,OAAKE,UAAY,wBAAwBD,KAAO,cAE9CH,EAAAC,EAAAC,cAAA,OAAKE,UAAY,iBAAjB,wBAIAJ,EAAAC,EAAAC,cAAA,WACG0B,EAAQpB,IAAI,SAAAV,GAAM,OAAEE,EAAAC,EAAAC,cAAA,KAAGS,IAAKb,EAAOO,MAAOD,UAAY,2BACrDJ,EAAAC,EAAAC,cAAA,UAAQE,UAAY,cAAcyB,QAAW,kBAAIF,EAAKG,SAAS,CAACC,WAAWjC,MACxEA,EAAOO,iBAOW2B,IAA1BV,KAAKI,MAAMK,WAA0B/B,EAAAC,EAAAC,cAACN,EAAD,CAAQE,OAAUwB,KAAKI,MAAMK,aAAgB,mBAEnF/B,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAChBJ,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,QAAMC,KAAK,MAAM8B,aAAW,WAA5B,gBAArB,uBA1BUC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.afda407e.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Recipe(props){\n\n    let recipe = props.recipe\n    let i = 1;\n\n    return (<main role=\"main\">\n\n    {/*<-- Main jumbotron for a primary marketing message or call to action -->*/}\n    <div className=\"jumbotron\">\n      <div className=\"container\">\n        <h1 className=\"display-3\">{recipe.title}</h1>\n        <p>{recipe.description}</p>\n      </div>\n    </div>\n\n    <div className=\"container\">\n      {/*<!-- Example row of columns -->*/}\n        {recipe.steps.map(step=><React.Fragment key = {step.instruction}>\n            <div className = \"row\">\n                <div className = \"col-md-4\">\n                    <h2>{i++}</h2>\n                    <p>{step.instruction}</p>\n                </div>\n                <div className = \"col-md-4\">\n                    {step.ingredients.map(ingredient=><p key={ingredient.name}>\n                        {ingredient.amount + \" \" + ingredient.unit + \" \" + ingredient.name}\n                    </p>)}\n                </div>\n            </div>\n            <hr/>\n        </React.Fragment>)}\n    </div> \n\n  </main>);\n}","import React, { Component } from 'react';\nimport Recipe from './recipe.js';\nimport './App.css';\n\nimport {default as recipes} from './recipes.json';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (<React.Fragment>\n      <nav className = \"navbar navbar-default\" role = \"navigation\">\n        \n        <div className = \"navbar-header\">\n          Wynand's Recipe Site\n        </div>\n        \n        <div>\n          {recipes.map(recipe=><p key={recipe.title} className = \"navbar-text navbar-left\">\n            <button className = \"navbar-link\" onClick = {()=>this.setState({currRecipe:recipe})}>\n              {recipe.title} \n            </button>\n          </p>)}\n        </div>\n        \n      </nav>\n\n      {this.state.currRecipe !== undefined ?<Recipe recipe = {this.state.currRecipe}/> : \"Select a recipe!\" }\n\n      <footer className=\"container\">\n        <p>Website made with <span role=\"img\" aria-label=\"burrito\">ðŸŒ¯</span> by Wynand</p>\n      </footer>\n    </React.Fragment>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}